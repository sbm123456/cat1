{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Context, Session, Tables } from 'koishi-core'\nimport { Time, Logger } from 'koishi-utils'\n\ndeclare module 'koishi-core' {\n  interface Tables {\n    schedule: Schedule\n  }\n}\n\nexport interface Schedule {\n  id: number\n  assignee: string\n  time: Date\n  lastCall: Date\n  interval: number\n  command: string\n  session: Partial<Session>\n}\n\nTables.extend('schedule', {\n  type: 'incremental',\n  fields: {\n    id: { type: 'integer' },\n    assignee: { type: 'string', length: 50 },\n    time: { type: 'timestamp' },\n    lastCall: { type: 'timestamp' },\n    interval: { type: 'integer', length: 20, initial: 0 },\n    command: { type: 'string', length: 1000 },\n    session: { type: 'json' },\n  },\n})\n\nconst logger = new Logger('schedule')\n\nfunction formatContext(session: Partial<Session>) {\n  return session.subtype === 'private' ? `私聊 ${session.userId}` : `群聊 ${session.groupId}`\n}\n\nexport interface Config {\n  minInterval?: number\n}\n\nexport const name = 'schedule'\n\nexport function apply(ctx: Context, config: Config = {}) {\n  const { database } = ctx\n  const { minInterval = Time.minute } = config\n\n  async function hasSchedule(id: number) {\n    const data = await database.get('schedule', [id])\n    return data.length\n  }\n\n  async function prepareSchedule({ id, session, interval, command, time, lastCall }: Schedule) {\n    const now = Date.now()\n    const date = time.valueOf()\n\n    async function executeSchedule() {\n      logger.debug('execute %d: %c', id, command)\n      await session.execute(command)\n      if (!lastCall || !interval) return\n      lastCall = new Date()\n      await database.update('schedule', [{ id, lastCall }])\n    }\n\n    if (!interval) {\n      if (date < now) {\n        database.remove('schedule', [id])\n        if (lastCall) executeSchedule()\n        return\n      }\n\n      logger.debug('prepare %d: %c at %s', id, command, time)\n      return ctx.setTimeout(async () => {\n        if (!await hasSchedule(id)) return\n        database.remove('schedule', [id])\n        executeSchedule()\n      }, date - now)\n    }\n\n    logger.debug('prepare %d: %c from %s every %s', id, command, time, Time.formatTimeShort(interval))\n    const timeout = date < now ? interval - (now - date) % interval : date - now\n    if (lastCall && timeout + now - interval > +lastCall) {\n      executeSchedule()\n    }\n\n    ctx.setTimeout(async () => {\n      if (!await hasSchedule(id)) return\n      const dispose = ctx.setInterval(async () => {\n        if (!await hasSchedule(id)) return dispose()\n        executeSchedule()\n      }, interval)\n      executeSchedule()\n    }, timeout)\n  }\n\n  ctx.on('connect', async () => {\n    const schedules = await database.get('schedule', { assignee: ctx.bots.map(bot => bot.sid) })\n    schedules.forEach((schedule) => {\n      const { session, assignee } = schedule\n      if (!ctx.bots[assignee]) return\n      schedule.session = new Session(ctx.app, session)\n      prepareSchedule(schedule)\n    })\n  })\n\n  ctx.command('schedule [time]', '设置定时命令', { authority: 3, checkUnknown: true })\n    .option('rest', '-- <command:text>  要执行的指令')\n    .option('interval', '/ <interval:string>  设置触发的间隔秒数', { authority: 4 })\n    .option('list', '-l  查看已经设置的日程')\n    .option('ensure', '-e  错过时间也确保执行')\n    .option('full', '-f  查找全部上下文', { authority: 4 })\n    .option('delete', '-d <id>  删除已经设置的日程')\n    .action(async ({ session, options }, ...dateSegments) => {\n      if (options.delete) {\n        await database.remove('schedule', [options.delete])\n        return `日程 ${options.delete} 已删除。`\n      }\n\n      if (options.list) {\n        let schedules = await database.get('schedule', { assignee: [session.sid] })\n        if (!options.full) {\n          schedules = schedules.filter(s => session.channelId === s.session.channelId)\n        }\n        if (!schedules.length) return '当前没有等待执行的日程。'\n        return schedules.map(({ id, time, interval, command, session }) => {\n          let output = `${id}. ${Time.formatTimeInterval(time, interval)}：${command}`\n          if (options.full) output += `，上下文：${formatContext(session)}`\n          return output\n        }).join('\\n')\n      }\n\n      if (!options.rest) return '请输入要执行的指令。'\n\n      const dateString = dateSegments.join('-')\n      const time = Time.parseDate(dateString)\n      const timestamp = +time\n      if (Number.isNaN(timestamp) || timestamp > 2147483647000) {\n        if (/^\\d+$/.test(dateString)) {\n          return `请输入合法的日期。你要输入的是不是 ${dateString}s？`\n        } else {\n          return '请输入合法的日期。'\n        }\n      } else if (!options.interval) {\n        if (!dateString) {\n          return '请输入执行时间。'\n        } else if (timestamp <= Date.now()) {\n          return '不能指定过去的时间为执行时间。'\n        }\n      }\n\n      const interval = Time.parseTime(options.interval)\n      if (!interval && options.interval) {\n        return '请输入合法的时间间隔。'\n      } else if (interval && interval < minInterval) {\n        return '时间间隔过短。'\n      }\n\n      const schedule = await database.create('schedule', {\n        time,\n        assignee: session.sid,\n        interval,\n        command: options.rest,\n        session: session.toJSON(),\n      })\n      schedule.session = session\n      prepareSchedule(schedule)\n      return `日程已创建，编号为 ${schedule.id}。`\n    })\n}\n"],
  "mappings": "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",
  "names": []
}
